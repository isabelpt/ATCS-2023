"""
A music visualizer.

@author: Isabel Prado-Tucker
@version: May 2024

Comments partially generated by ChatGPT
Template made by ChatGPT with the following prompt:
Make a simply object-oriented python script that loads a pygame screen that changes color every second
"""
import pygame
import random
import sys
from song import Song
from frequency_visual import Freq_Visual
import numpy as np
import math

# Controls the pygame screen and coordinated movement
class Game:
    def __init__(self, width, height, song):
        """
        Initializes the Game object with screen dimensions and a Song object.

        Parameters:
            width (int): The width of the pygame screen.
            height (int): The height of the pygame screen.
            song (Song): The Song object representing the audio source.
        """
        self.width, self.height, self.song = width, height, song
        self.bpm = self.song.get_tempo()

        # Initialize pygame screen and clock
        self.screen = pygame.display.set_mode((width, height))
        self.clock = pygame.time.Clock()
        self.next_color_change = pygame.time.get_ticks()

        self.color_i = 0
        self.color = self.song.top_colors[self.color_i]

        self.freq_visuals = []
        self.frequencies = np.arange(0, self.width, 15)

        self.num_bars = len(self.frequencies)
        self.bar_width = math.ceil(self.width/self.num_bars)
        self.bar_x = (self.width - self.bar_width*self.num_bars)/2

        # Create frequency visualizer objects
        for freq in self.frequencies:
            self.freq_visuals.append(Freq_Visual(self.bar_x, 20, freq, self.song.top_colors[len(self.song.top_colors)-1], self.bar_width, self.height))
            self.bar_x += self.bar_width
        
        self.min_radius = 150
        self.radius = self.min_radius
        self.radius_vel = 1

        # Load music file and arm image
        pygame.mixer.music.load(self.song.song_fp)
        self.arm = pygame.image.load("_assets/img/arm.png")
        self.arm = pygame.transform.scale(self.arm, (140, 175))

    def random_color(self, alpha=10):
        """
        Generates a random color with optional alpha value.

        Parameters:
            alpha (int): Alpha value for transparency (default is 10).

        Returns:
            tuple: A tuple representing the RGB values of the generated color.
        """
        return (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255), alpha)

    def calculate_beat_interval(self):
        """
        Calculates the time interval between beats based on the tempo (bpm).

        Returns:
            float: The calculated beat interval in milliseconds.
        """
        return 60 * 1000 / self.bpm

    def run(self):
        """
        Runs the main loop of the game, controlling screen updates and events.
        """
        current_time = pygame.time.get_ticks()
        last_time = current_time
        pygame.mixer.music.play(0)

        running = True
        while running:
            current_time = pygame.time.get_ticks()
            change_time = (current_time - last_time) / 1000.0
            last_time = current_time
            beat_interval = self.calculate_beat_interval()

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False
            
            # Change color periodically based on beat intervals
            if current_time >= self.next_color_change:
                if self.color_i >= len(self.song.top_colors) - 2:
                    self.color_i = 0
                self.color = self.song.top_colors[self.color_i]
                self.color_i += 1
                self.radius_vel *= -1
                self.next_color_change += beat_interval

            # Fill screen with current color
            self.screen.fill(self.color)

            # Update and draw frequency visualizers
            for f in self.freq_visuals:
                f.update(change_time, self.song.get_decibel(pygame.mixer.music.get_pos()/1000.0, f.frequency))
                f.draw(self.screen)
            
            # Draw record player and arm
            record_player_w, record_player_h = 350, 250
            pygame.draw.rect(self.screen, (255,255,255, 200), pygame.Rect((self.width - record_player_w)/2, (self.height - record_player_h)/2 - 75, record_player_w, record_player_h), border_radius=10)
            offset = 25
            self.song.draw(self.screen, self.radius, (self.width/2-self.radius - offset,self.height/2-self.radius - 75))
            self.radius += self.radius_vel

            self.screen.blit(self.arm, (275, 138 - 75))
            pygame.display.flip()
            self.clock.tick(60)

        pygame.quit()
        sys.exit()

if __name__ == "__main__":
    print("  █▀▀▀▀▀▀▀▀▀▀▀▀▀▀█                                   █▀▀▀▀▀▀▀▀▀▀▀▀▀▀█")
    print("██▀▀▀██▀▀▀▀▀▀██▀▀▀██ » Isabel's Music Visualizer « ██▀▀▀██▀▀▀▀▀▀██▀▀▀██")
    print("█▒▒▒▒▒█▒▀▀▀▀▒█▒▒▒▒▒█      0:00 ─〇───── 0:00       █▒▒▒▒▒█▒▀▀▀▀▒█▒▒▒▒▒█")
    print("█▒▒▒▒▒█▒████▒█▒▒▒▒▒█     ⇄   ◃◃   ⅠⅠ   ▹▹   ↻      █▒▒▒▒▒█▒████▒█▒▒▒▒▒█")
    print("██▄▄▄██▄▄▄▄▄▄██▄▄▄██                               ██▄▄▄██▄▄▄▄▄▄██▄▄▄██")
    print("Here are the song options: ")
    print("1. Not Strong Enough by Boygenius")
    print("2. Stick Season by Noah Kahan")
    print("3. Kill Bill by SZA")
    print("4. Last Night by Morgan Wallen")
    print("5. Cruel Summer by Taylor Swift")
    choice = str(input("Enter the number of the track you want to play: "))
    pygame.init()
    WIDTH, HEIGHT = 500, 500
    song = Song(choice, WIDTH, HEIGHT)
    game = Game(WIDTH, HEIGHT, song)
    game.run()